name: Xcode – Build and Analyze
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: Build and analyze default scheme
    # macOS-15 images carry only Xcode 16 line — keeps you compatible with
    # projects saved by Xcode 16 (objectVersion 77)
    runs-on: macos-15              # ← option 1
    steps:
      - uses: actions/checkout@v4

      # Select the exact Xcode you use locally
      - uses: maxim-lobanov/setup-xcode@v3
        with:
          xcode-version: '16.2'    # bump as new minors land

      # Show the chosen tool-chain in the log
      - name: Show Xcode version
        run: xcodebuild -version

      # -------- project discovery --------
      - name: Find Xcode project
        id: find-project
        run: |
          if [ -n "$(find . -maxdepth 1 -name '*.xcodeproj' -o -name '*.xcworkspace')" ]; then
            echo "PROJECT_PATH=." >>"$GITHUB_OUTPUT"
          else
            dir=$(find . -type d \( -name '*.xcodeproj' -o -name '*.xcworkspace' \) -print -quit | xargs dirname)
            [ -z "$dir" ] && { echo "::error::No Xcode project or workspace found"; exit 1; }
            echo "PROJECT_PATH=$dir" >>"$GITHUB_OUTPUT"
          fi
          echo "Project path → $dir"

      # -------- scheme detection --------
      - name: Detect default scheme
        working-directory: ${{ steps.find-project.outputs.PROJECT_PATH }}
        id: scheme
        run: |
          default=$(xcodebuild -list -json 2>/dev/null \
                    | ruby -rjson -e 'puts JSON.parse(STDIN.read)["project"]["targets"][0] rescue "Default"')
          echo "scheme=$default"   >>"$GITHUB_ENV"
          echo "Using scheme → $default"

      # -------- build & static-analyze --------
      - name: Build and analyze
        working-directory: ${{ steps.find-project.outputs.PROJECT_PATH }}
        env:
          scheme: ${{ env.scheme }}
        shell: bash -eo pipefail
        run: |
          workspace=$(ls *.xcworkspace 2>/dev/null | head -n1)
          project=$(ls *.xcodeproj    2>/dev/null | head -n1)
          param=${workspace:+-workspace "$workspace"}${project:+-project "$project"}

          echo "Building $param with scheme $scheme"
          xcodebuild clean build analyze \
            $param -scheme "$scheme" \
            COMPILER_INDEX_STORE_ENABLE=NO \
            CLANG_ANALYZER_OUTPUT=plist-html \
            CLANG_ANALYZER_OUTPUT_DIR="$PWD/analyzer_reports" \
            | tee build.log | xcpretty --report junit

          # surface warnings without failing
          grep -n "warning: " build.log || true
          # but fail on real errors
          grep -q "error: " build.log && { echo "::error::Errors found"; exit 1; }

      # -------- artifacts --------
      - name: Upload build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: ${{ steps.find-project.outputs.PROJECT_PATH }}/build.log

      - name: Upload analyzer reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: analyzer-reports
          path: ${{ steps.find-project.outputs.PROJECT_PATH }}/analyzer_reports
